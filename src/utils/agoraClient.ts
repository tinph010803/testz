import AgoraRTC, {
  IAgoraRTCClient,
  IMicrophoneAudioTrack,
  ICameraVideoTrack,
} from "agora-rtc-sdk-ng";

export const APP_ID = "ddbc9d658056487daa490c775a735132";
export const TOKEN = null;

export const agoraClient: IAgoraRTCClient = AgoraRTC.createClient({
  mode: "rtc",
  codec: "vp8",
});

export let localAudioTrack: IMicrophoneAudioTrack | null = null;
export let localVideoTrack: ICameraVideoTrack | null = null;

// ‚úèÔ∏è Thay th·∫ø h√†m joinAgora b·∫±ng 2 h√†m m·ªõi

export const joinOnly = async (channel: string, uid: string) => {
  try {
    console.log("‚û°Ô∏è Joining only channel", channel, "with UID", uid);

    if (
      agoraClient.connectionState === "CONNECTED" ||
      agoraClient.connectionState === "CONNECTING"
    ) {
      console.warn("‚ö†Ô∏è Already connected. Leaving first...");
      await leaveAgora();
    }

    await agoraClient.join(APP_ID, channel, TOKEN, uid);
  } catch (error) {
    console.error("‚ùå joinOnly failed:", error);
  }
};

export const publishTracks = async () => {
  try {
    // Kh√¥ng truy·ªÅn cameraId ‚Üí d√πng ƒë√∫ng camera m·∫∑c ƒë·ªãnh c·ªßa tr√¨nh duy·ªát
    [localAudioTrack, localVideoTrack] = await AgoraRTC.createMicrophoneAndCameraTracks();

    console.log("‚úÖ Created local tracks with default devices");
    await agoraClient.publish([localAudioTrack, localVideoTrack]);
    console.log("üì° Published tracks");
  } catch (error) {
    console.error("‚ùå publishTracks failed:", error);
  }
};


// ‚úÖ N·∫øu v·∫´n c·∫ßn gi·ªØ h√†m c≈© ƒë·ªÉ d√πng nhanh, th√¨ ƒë·ªÉ nh∆∞ sau:
export const joinAgora = async (channel: string, uid: string) => {
  await joinOnly(channel, uid);
  await publishTracks();
};


export const leaveAgora = async () => {
  try {
    console.log("‚¨ÖÔ∏è Leaving Agora channel");

    if (localAudioTrack) {
      localAudioTrack.stop();
      localAudioTrack.close();
      localAudioTrack = null; // üëà reset l·∫°i
    }

    if (localVideoTrack) {
      localVideoTrack.stop();
      localVideoTrack.close();
      localVideoTrack = null; // üëà reset l·∫°i
    }

    if (
      agoraClient.connectionState === "CONNECTED" ||
      agoraClient.connectionState === "CONNECTING"
    ) {
      await agoraClient.leave();
      agoraClient.removeAllListeners();
    }

    agoraClient.removeAllListeners(); // üëà tr√°nh gi·ªØ s·ª± ki·ªán c≈©
  } catch (error) {
    console.error("‚ùå leaveAgora failed:", error);
  }
};
